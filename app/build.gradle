apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.ebeitech.construction"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        staging.initWith(signingConfigs.debug)

        release {
            println rootProject.ext.signingConfig.storePassword
            storeFile file("${projectDir}/pos.jks")
            storePassword rootProject.ext.signingConfig.storePassword
            keyAlias rootProject.ext.signingConfig.keyAlias
            keyPassword rootProject.ext.signingConfig.keyPassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release //为了使百度地图可用，debug也签名
        }

        release {
            minifyEnabled true
            zipAlignEnabled true//Zipalign优化
            shrinkResources true//删除无用的资源文件
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        merchant_test {
            buildConfigField "String", "API_URL", rootProject.ext.testUrl
        }

        merchant_prod {
            buildConfigField "String", "API_URL", rootProject.ext.productUrl
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace("release.apk", "${defaultConfig.versionName}.apk")
                fileName = fileName.replace("app-", "pos_")
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    repositories.flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':library')

    compile "com.android.support:appcompat-v7:${rootProject.ext.supportVersion}"
    testCompile 'junit:junit:4.12'
}
